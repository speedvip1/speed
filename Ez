local Universal = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Local Player
local LocalPlayer = Players.LocalPlayer

-- Utility Functions
function Universal:TweenObject(Object, Properties, Duration)
    local Tween = TweenService:Create(Object, TweenInfo.new(Duration or 0.5), Properties)
    Tween:Play()
    return Tween
end

function Universal:Notify(Title, Text, Duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = Title,
        Text = Text,
        Duration = Duration or 5
    })
end

function Universal:RoundNumber(num)
    return math.floor(num + 0.5)
end

function Universal:GetPlayerByName(Name)
    return Players:FindFirstChild(Name)
end

-- UI Creation Functions
function Universal:CreateWindow(Name)
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TabHolder = Instance.new("Frame")
    local UIListLayout = Instance.new("UIListLayout")
    
    ScreenGui.Name = Name .. "Gui"
    ScreenGui.Parent = CoreGui
    ScreenGui.ResetOnSpawn = false
    
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.Size = UDim2.new(0, 500, 0, 350)
    MainFrame.Position = UDim2.new(0.5, -250, 0.5, -175)
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = MainFrame
    
    TabHolder.Name = "TabHolder"
    TabHolder.Parent = MainFrame
    TabHolder.Size = UDim2.new(0, 120, 0, 350)
    TabHolder.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TabHolder.BorderSizePixel = 0
    
    UIListLayout.Parent = TabHolder
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    UIListLayout.Padding = UDim.new(0, 5)
    
    local Tabs = {}
    
    function Tabs:AddTab(TabName)
        local TabButton = Instance.new("TextButton")
        local TabFrame = Instance.new("ScrollingFrame")
        
        TabButton.Name = TabName .. "Tab"
        TabButton.Parent = TabHolder
        TabButton.Size = UDim2.new(0, 100, 0, 30)
        TabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        TabButton.Text = TabName
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.TextSize = 14
        
        local TabCorner = Instance.new("UICorner")
        TabCorner.CornerRadius = UDim.new(0, 5)
        TabCorner.Parent = TabButton
        
        TabFrame.Name = TabName .. "Frame"
        TabFrame.Parent = MainFrame
        TabFrame.Size = UDim2.new(0, 370, 0, 320)
        TabFrame.Position = UDim2.new(0, 125, 0, 15)
        TabFrame.BackgroundTransparency = 1
        TabFrame.ScrollBarThickness = 3
        TabFrame.Visible = false
        
        local TabListLayout = Instance.new("UIListLayout")
        TabListLayout.Parent = TabFrame
        TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TabListLayout.VerticalAlignment = Enum.VerticalAlignment.Top
        TabListLayout.Padding = UDim.new(0, 5)
        
        TabButton.MouseButton1Click:Connect(function()
            for _, Frame in pairs(MainFrame:GetChildren()) do
                if Frame:IsA("ScrollingFrame") then
                    Frame.Visible = false
                end
            end
            TabFrame.Visible = true
        end)
        
        local TabElements = {}
        
        function TabElements:AddButton(ButtonConfig)
            local Button = Instance.new("TextButton")
            
            Button.Name = ButtonConfig.Name
            Button.Parent = TabFrame
            Button.Size = UDim2.new(0, 350, 0, 35)
            Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            Button.Text = ButtonConfig.Name
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.TextSize = 14
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 5)
            ButtonCorner.Parent = Button
            
            Button.MouseButton1Click:Connect(ButtonConfig.Callback)
            
            return Button
        end
        
        function TabElements:AddToggle(ToggleConfig)
            local ToggleFrame = Instance.new("Frame")
            local ToggleButton = Instance.new("TextButton")
            local ToggleStatus = Instance.new("Frame")
            
            ToggleFrame.Name = ToggleConfig.Name .. "Toggle"
            ToggleFrame.Parent = TabFrame
            ToggleFrame.Size = UDim2.new(0, 350, 0, 35)
            ToggleFrame.BackgroundTransparency = 1
            
            ToggleButton.Name = "ToggleButton"
            ToggleButton.Parent = ToggleFrame
            ToggleButton.Size = UDim2.new(0, 350, 0, 35)
            ToggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            ToggleButton.Text = ToggleConfig.Name
            ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleButton.TextSize = 14
            ToggleButton.TextXAlignment = Enum.TextXAlignment.Left
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 5)
            ButtonCorner.Parent = ToggleButton
            
            ToggleStatus.Name = "ToggleStatus"
            ToggleStatus.Parent = ToggleButton
            ToggleStatus.Size = UDim2.new(0, 20, 0, 20)
            ToggleStatus.Position = UDim2.new(0, 320, 0, 7)
            ToggleStatus.BackgroundColor3 = ToggleConfig.Default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            
            local StatusCorner = Instance.new("UICorner")
            StatusCorner.CornerRadius = UDim.new(1, 0)
            StatusCorner.Parent = ToggleStatus
            
            local Toggled = ToggleConfig.Default
            
            ToggleButton.MouseButton1Click:Connect(function()
                Toggled = not Toggled
                ToggleStatus.BackgroundColor3 = Toggled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                ToggleConfig.Callback(Toggled)
            end)
            
            return ToggleFrame
        end
        
        function TabElements:AddSlider(SliderConfig)
            local SliderFrame = Instance.new("Frame")
            local SliderTitle = Instance.new("TextLabel")
            local SliderBar = Instance.new("Frame")
            local SliderFill = Instance.new("Frame")
            local SliderValue = Instance.new("TextLabel")
            
            SliderFrame.Name = SliderConfig.Name .. "Slider"
            SliderFrame.Parent = TabFrame
            SliderFrame.Size = UDim2.new(0, 350, 0, 50)
            SliderFrame.BackgroundTransparency = 1
            
            SliderTitle.Name = "SliderTitle"
            SliderTitle.Parent = SliderFrame
            SliderTitle.Size = UDim2.new(0, 350, 0, 20)
            SliderTitle.BackgroundTransparency = 1
            SliderTitle.Text = SliderConfig.Name
            SliderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            SliderTitle.TextSize = 14
            SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            SliderBar.Name = "SliderBar"
            SliderBar.Parent = SliderFrame
            SliderBar.Size = UDim2.new(0, 350, 0, 5)
            SliderBar.Position = UDim2.new(0, 0, 0, 30)
            SliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            
            local BarCorner = Instance.new("UICorner")
            BarCorner.CornerRadius = UDim.new(1, 0)
            BarCorner.Parent = SliderBar
            
            SliderFill.Name = "SliderFill"
            SliderFill.Parent = SliderBar
            SliderFill.Size = UDim2.new(0, 0, 1, 0)
            SliderFill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
            
            local FillCorner = Instance.new("UICorner")
            FillCorner.CornerRadius = UDim.new(1, 0)
            FillCorner.Parent = SliderFill
            
            SliderValue.Name = "SliderValue"
            SliderValue.Parent = SliderFrame
            SliderValue.Size = UDim2.new(0, 50, 0, 20)
            SliderValue.Position = UDim2.new(0, 300, 0, 30)
            SliderValue.BackgroundTransparency = 1
            SliderValue.Text = tostring(SliderConfig.Default)
            SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
            SliderValue.TextSize = 14
            
            local currentValue = SliderConfig.Default
            
            SliderBar.MouseButton1Down:Connect(function()
                local function UpdateSlider(input)
                    local pos = UDim2.new(0, math.clamp(input.Position.X - SliderBar.AbsolutePosition.X, 0, 350), 0, 5)
                    local value = math.floor(SliderConfig.Min + (pos.X.Scale * 350 / 350 * (SliderConfig.Max - SliderConfig.Min)))
                    
                    currentValue = math.clamp(value, SliderConfig.Min, SliderConfig.Max)
                    SliderFill.Size = UDim2.new((currentValue - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min), 0, 1, 0)
                    SliderValue.Text = tostring(currentValue)
                    SliderConfig.Callback(currentValue)
                end
                
                UpdateSlider(UserInputService:GetMouseLocation())
                
                local connection
                connection = UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        UpdateSlider(input)
                    end
                end)
                
                local releaseConnection
                releaseConnection = UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        connection:Disconnect()
                        releaseConnection:Disconnect()
                    end
                end)
            end)
            
            return SliderFrame
        end
        
        function TabElements:AddDropdown(DropdownConfig)
            local DropdownFrame = Instance.new("Frame")
            local DropdownButton = Instance.new("TextButton")
            local DropdownList = Instance.new("ScrollingFrame")
            local DropdownArrow = Instance.new("TextLabel")
            
            DropdownFrame.Name = DropdownConfig.Name .. "Dropdown"
            DropdownFrame.Parent = TabFrame
            DropdownFrame.Size = UDim2.new(0, 350, 0, 35)
            DropdownFrame.BackgroundTransparency = 1
            
            DropdownButton.Name = "DropdownButton"
            DropdownButton.Parent = DropdownFrame
            DropdownButton.Size = UDim2.new(0, 350, 0, 35)
            DropdownButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            DropdownButton.Text = DropdownConfig.Name .. ": " .. DropdownConfig.Default
            DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropdownButton.TextSize = 14
            
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 5)
            ButtonCorner.Parent = DropdownButton
            
            DropdownArrow.Name = "DropdownArrow"
            DropdownArrow.Parent = DropdownButton
            DropdownArrow.Size = UDim2.new(0, 20, 0, 20)
            DropdownArrow.Position = UDim2.new(0, 320, 0, 7)
            DropdownArrow.BackgroundTransparency = 1
            DropdownArrow.Text = "▼"
            DropdownArrow.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropdownArrow.TextSize = 14
            
            DropdownList.Name = "DropdownList"
            DropdownList.Parent = DropdownFrame
            DropdownList.Size = UDim2.new(0, 350, 0, 0)
            DropdownList.Position = UDim2.new(0, 0, 0, 40)
            DropdownList.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            DropdownList.ScrollBarThickness = 3
            DropdownList.Visible = false
            
            local ListLayout = Instance.new("UIListLayout")
            ListLayout.Parent = DropdownList
            
            local isOpen = false
            local selected = DropdownConfig.Default
            
            local function UpdateDropdown()
                for _, option in pairs(DropdownList:GetChildren()) do
                    if option:IsA("TextButton") then
                        option.BackgroundColor3 = option.Text == selected and Color3.fromRGB(0, 100, 255) or Color3.fromRGB(45, 45, 45)
                    end
                end
                DropdownButton.Text = DropdownConfig.Name .. ": " .. selected
            end
            
            for _, option in pairs(DropdownConfig.Options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Name = option
                OptionButton.Parent = DropdownList
                OptionButton.Size = UDim2.new(0, 350, 0, 25)
                OptionButton.BackgroundColor3 = option == selected and Color3.fromRGB(0, 100, 255) or Color3.fromRGB(45, 45, 45)
                OptionButton.Text = option
                OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                OptionButton.TextSize = 12
                
                OptionButton.MouseButton1Click:Connect(function()
                    selected = option
                    UpdateDropdown()
                    DropdownConfig.Callback(selected)
                    DropdownList.Visible = false
                    isOpen = false
                    DropdownArrow.Text = "▼"
                end)
            end
            
            DropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                DropdownList.Visible = isOpen
                DropdownList.Size = UDim2.new(0, 350, 0, math.min(#DropdownConfig.Options * 25, 100))
                DropdownArrow.Text = isOpen and "▲" or "▼"
            end)
            
            return DropdownFrame
        end
        
        return TabElements
    end
    
    return Tabs
end

return Universal
