--[[
    ╔═══════════════════════════════════════════════════════════════╗
    ║                     REDZ LIBRARY V4 - Enhanced               ║
    ║                     Beautiful UI Framework                   ║
    ╚═══════════════════════════════════════════════════════════════╝
]]

-- ═══════════════════════════════════════════════════════════════
--                        CORE SERVICES
-- ═══════════════════════════════════════════════════════════════

local Services = {
    MarketplaceService = game:GetService("MarketplaceService"),
    UserInputService = game:GetService("UserInputService"),
    TweenService = game:GetService("TweenService"),
    HttpService = game:GetService("HttpService"),
    RunService = game:GetService("RunService"),
    Players = game:GetService("Players"),
    CoreGui = game:GetService("CoreGui")
}

local Player = Services.Players.LocalPlayer
local LibraryRawUrl = "https://raw.githubusercontent.com/hacked-prototype/RedzLibV4/main"

-- ═══════════════════════════════════════════════════════════════
--                        LIBRARY CORE
-- ═══════════════════════════════════════════════════════════════

local redzLib = {
    -- Core Information
    info = {
        Version = "v1.2.2",
        PlaceName = Services.MarketplaceService:GetProductInfo(game.PlaceId).Name
    },
    
    -- External Resources
    Themes = loadstring(game:HttpGet(LibraryRawUrl .. "/Themes.lua"))(),
    Icons = loadstring(game:HttpGet(LibraryRawUrl .. "/Icons.lua"))(),
    
    -- Data Storage
    Flags = {},
    Save = {
        Theme = "Default",
        UISize = {550, 310},
        ScrollSize = 160,
        TransparencyHub = 0.1
    },
    
    -- Theme Storage for Real-time Updates
    SaveForTheme = {
        Stroke = {},    Buttons = {},   Images = {},
        Text = {},      DarkText = {},  Frames = {},
        Corner = {},    Theme = {},     Toggle = {}
    }
}

-- ═══════════════════════════════════════════════════════════════
--                        UTILITY FUNCTIONS
-- ═══════════════════════════════════════════════════════════════

local function GetIcon(iconName)
    if #iconName:split("") < 1 then return iconName end
    
    for name, assetId in pairs(redzLib.Icons) do
        local cleanInput = iconName:lower():gsub("lucide", ""):gsub("-", "")
        local cleanIcon = name:lower():gsub("lucide", ""):gsub("-", "")
        
        if cleanInput == cleanIcon then
            return assetId
        end
    end
    
    -- Fallback: partial matching
    for name, assetId in pairs(redzLib.Icons) do
        local cleanInput = iconName:lower():gsub("lucide", ""):gsub("-", "")
        local cleanIcon = name:lower():gsub("lucide", ""):gsub("-", "")
        
        if cleanIcon:find(cleanInput) then
            return assetId
        end
    end
    
    return iconName
end

local ViewportSize = workspace.CurrentCamera.ViewportSize
local UIScale = ViewportSize.Y / 550

-- ═══════════════════════════════════════════════════════════════
--                        CREATION HELPERS
-- ═══════════════════════════════════════════════════════════════

local function SetProps(instance, props)
    if props and typeof(props) == "table" then
        for prop, value in pairs(props) do
            instance[prop] = value
        end
    end
    return instance
end

local function SetChildren(instance, children)
    if children and typeof(children) == "table" then
        for _, child in pairs(children) do
            child.Parent = instance
        end
    end
    return instance
end

local function Create(instanceName, parent, props, children)
    local newInstance = Instance.new(instanceName)
    
    if parent and typeof(parent) == "Instance" then
        newInstance.Parent = parent
        SetProps(newInstance, props)
        SetChildren(newInstance, children)
    else
        SetProps(newInstance, parent)
        SetChildren(newInstance, props)
    end
    
    return newInstance
end

-- ═══════════════════════════════════════════════════════════════
--                        DATA MANAGEMENT
-- ═══════════════════════════════════════════════════════════════

local function FindTable(table, value)
    for key, _ in pairs(table) do
        if key == value then return true end
    end
    return false
end

local function VerifyTheme(themeName)
    return redzLib.Themes[themeName] ~= nil
end

local function LoadSettings(fileName)
    if not (readfile and isfile and isfile(fileName)) then return end
    
    local success, decode = pcall(function()
        return Services.HttpService:JSONDecode(readfile(fileName))
    end)
    
    if success and typeof(decode) == "table" then
        if FindTable(decode, "ScrollSize") then 
            redzLib.Save["ScrollSize"] = decode["ScrollSize"] 
        end
        if FindTable(decode, "UISize") then 
            redzLib.Save["UISize"] = decode["UISize"] 
        end
        if FindTable(decode, "Theme") and VerifyTheme(decode["Theme"]) then 
            redzLib.Save["Theme"] = decode["Theme"] 
        end
        if FindTable(decode, "TransparencyHub") then 
            redzLib.Save["TransparencyHub"] = decode["TransparencyHub"] 
        end
    end
end

LoadSettings("redz library V4.lua")

-- ═══════════════════════════════════════════════════════════════
--                        THEME SYSTEM
-- ═══════════════════════════════════════════════════════════════

local Theme = redzLib.Themes[redzLib.Save.Theme]

local function SaveSettings(fileName, saveData)
    if writefile then
        local success, json = pcall(function()
            return Services.HttpService:JSONEncode(saveData)
        end)
        if success then
            writefile(fileName, json)
        end
    end
end

-- ═══════════════════════════════════════════════════════════════
--                        ANIMATION SYSTEM
-- ═══════════════════════════════════════════════════════════════

local function CreateTween(configs)
    local instance = configs[1] or configs.Instance
    local property = configs[2] or configs.Prop
    local newValue = configs[3] or configs.NewVal
    local duration = configs[4] or configs.Time or 0.5
    local shouldWait = configs[5] or configs.wait or false
    
    local tweenInfo = TweenInfo.new(duration, Theme["Tween Style"])
    local tween = Services.TweenService:Create(instance, tweenInfo, {[property] = newValue})
    
    tween:Play()
    if shouldWait then
        tween.Completed:Wait()
    end
    
    return tween
end

-- ═══════════════════════════════════════════════════════════════
--                        DRAG SYSTEM
-- ═══════════════════════════════════════════════════════════════

local function MakeDrag(instance)
    task.spawn(function()
        local dragStart, startPos
        
        local function UpdatePosition(input)
            local delta = input.Position - dragStart
            local newPosition = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X / UIScale,
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y / UIScale
            )
            instance.Position = newPosition
        end
        
        instance.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or 
               input.UserInputType == Enum.UserInputType.Touch then
                
                startPos = instance.Position
                dragStart = input.Position
                
                while Services.UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                    Services.RunService.Heartbeat:Wait()
                    UpdatePosition(input)
                end
            end
        end)
    end)
    
    return instance
end

-- ═══════════════════════════════════════════════════════════════
--                        THEME HELPERS
-- ═══════════════════════════════════════════════════════════════

local function InsertTheme(instance, themeCategory)
    table.insert(redzLib.SaveForTheme[themeCategory], instance)
    return typeof(instance) == "table" and instance[1] or instance
end

local function Corner(props, isCircle)
    local corner = Create("UICorner", {
        CornerRadius = isCircle and UDim.new(0.5, 0) or Theme["Corner Radius"]
    })
    SetProps(corner, props)
    
    if not isCircle then
        table.insert(redzLib.SaveForTheme.Corner, corner)
    end
    
    return corner
end

local function Stroke(props)
    local stroke = Create("UIStroke", {
        Color = Theme["Color Stroke"],
        Thickness = Theme["Stroke Thickness"],
        ApplyStrokeMode = "Border"
    })
    SetProps(stroke, props)
    table.insert(redzLib.SaveForTheme.Stroke, stroke)
    return stroke
end

local function Button(parent, props, children)
    local button = Create("TextButton", parent, {
        Text = "",
        AutoButtonColor = false,
        BackgroundColor3 = Theme["Color Hub 2"],
        BackgroundTransparency = Theme["Transparency"],
        Name = "Frame"
    }, {Corner()})
    
    SetProps(button, props)
    SetChildren(button, children)
    table.insert(redzLib.SaveForTheme.Buttons, button)
    
    return button
end

-- ═══════════════════════════════════════════════════════════════
--                        CONNECTION HELPERS
-- ═══════════════════════════════════════════════════════════════

local function AddConnection(instance, connection, func)
    instance[connection]:Connect(function()
        func(instance)
    end)
    return instance
end

local function ConnectSave(instance, func)
    instance.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            
            while Services.UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                task.wait()
            end
        end
        func()
    end)
end

-- ═══════════════════════════════════════════════════════════════
--                        MAIN SCREEN GUI
-- ═══════════════════════════════════════════════════════════════

local ScreenGui = Create("ScreenGui", Services.CoreGui, {
    Name = "redz library V4"
}, {
    Create("UIScale", {
        Scale = UIScale
    })
})

-- Clean up existing instances
local existingScreen = Services.CoreGui:FindFirstChild(ScreenGui.Name)
if existingScreen and existingScreen ~= ScreenGui then
    existingScreen:Destroy()
end

-- ═══════════════════════════════════════════════════════════════
--                        NOTIFICATION SYSTEM
-- ═══════════════════════════════════════════════════════════════

task.spawn(function()
    local NotifyContainer = Create("Frame", ScreenGui, {
        Size = UDim2.new(0, 300, 1),
        Position = UDim2.fromScale(1),
        AnchorPoint = Vector2.new(1),
        BackgroundTransparency = 1
    }, {
        Create("UIPadding", {
            PaddingLeft = UDim.new(0, 25),
            PaddingTop = UDim.new(0, 25),
            PaddingBottom = UDim.new(0, 30)
        }),
        Create("UIListLayout", {
            Padding = UDim.new(0, 15),
            VerticalAlignment = "Bottom"
        })
    })
    
    function redzLib:MakeNotify(configs)
        local title = configs[1] or configs.Title or "Notification"
        local text = configs[2] or configs.Text or "This is a notification"
        local duration = configs[3] or configs.Time or 5
        
        local notifyFrame = Create("Frame", NotifyContainer, {
            Size = UDim2.new(2, 0, 0, 0),
            BackgroundTransparency = 1,
            AutomaticSize = "Y",
            Name = "Notification"
        })
        
        local realFrame = InsertTheme(Create("Frame", notifyFrame, {
            Size = UDim2.new(0.5, -25),
            BackgroundColor3 = Theme["Color Hub 1"],
            BackgroundTransparency = Theme["Transparency"],
            Position = UDim2.fromOffset(1),
            AutomaticSize = "Y",
            Active = true
        }, {
            Corner(),
            InsertTheme(Create("TextLabel", {
                Size = UDim2.new(1, 0, 0, 15),
                Font = Theme["Font"][2],
                BackgroundTransparency = 1,
                Text = title,
                TextSize = 12,
                Position = UDim2.new(0, 15, 0, 5),
                TextXAlignment = "Left",
                TextColor3 = Theme["Color Text"]
            }), "Text"),
            InsertTheme(Create("TextLabel", {
                Size = UDim2.new(1, -25, 0, 0),
                Position = UDim2.new(0, 15, 0, 25),
                TextSize = 10,
                TextColor3 = Theme["Color Dark Text"],
                TextXAlignment = "Left",
                TextYAlignment = "Top",
                AutomaticSize = "Y",
                Text = text,
                Font = Theme["Font"][3],
                BackgroundTransparency = 1,
                TextWrapped = true
            }, {
                Create("Frame", {
                    Size = UDim2.fromOffset(0, 8),
                    Position = UDim2.fromScale(0, 1),
                    BackgroundTransparency = 1
                })
            }), "DarkText")
        }), "Frames")
        
        local closeButton = Create("TextButton", realFrame, {
            Text = "×",
            Font = Enum.Font.FredokaOne,
            TextSize = 15,
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(200, 200, 200),
            Position = UDim2.new(1, -5, 0, 2),
            AnchorPoint = Vector2.new(1, 0),
            Size = UDim2.fromOffset(15, 15)
        })
        
        local timer = InsertTheme(Create("Frame", realFrame, {
            Size = UDim2.new(1, 0, 0, 1.5),
            BackgroundColor3 = Theme["Color Stroke"],
            Position = UDim2.new(0, 2, 0, 20),
            BorderSizePixel = 0
        }, {
            Corner(),
            Create("Frame", {
                Size = UDim2.new(0, 0, 0, 5),
                Position = UDim2.new(0, 0, 1, 5),
                BackgroundTransparency = 1
            })
        }), "Stroke")
        
        local isFinished, isDestroyed = false, false
        
        local function CloseNotification()
            if not isDestroyed and not isFinished and notifyFrame then
                isFinished = true
                CreateTween({realFrame, "Position", UDim2.new(0, -50), 0.15, true})
                CreateTween({realFrame, "Position", UDim2.new(1), 0.50, true})
                notifyFrame:Destroy()
                isDestroyed = true
            end
        end
        
        closeButton.Activated:Connect(CloseNotification)
        
        -- Animation sequence
        task.spawn(function()
            CreateTween({realFrame, "Position", UDim2.new(0, -50), 0.5, true})
            CreateTween({realFrame, "Position", UDim2.new(0, 0), 0.15, true})
            CreateTween({timer, "Size", UDim2.new(0, 0, 0, 1.5), duration, true})
            CloseNotification()
        end)
        
        -- Return notification object
        local notificationObj = {}
        function notificationObj:Destroy() 
            isDestroyed = true 
            notifyFrame:Destroy() 
        end
        function notificationObj:Visible(bool) 
            notifyFrame.Visible = bool 
        end
        function notificationObj:Wait() 
            repeat task.wait() until not notifyFrame or isFinished or isDestroyed 
        end
        
        return notificationObj
    end
end)

-- ═══════════════════════════════════════════════════════════════
--                        LIBRARY API FUNCTIONS
-- ═══════════════════════════════════════════════════════════════

function redzLib:GetIcon(iconName)
    return GetIcon(iconName)
end

function redzLib:SetTransparency(newValue)
    local clampedValue = math.clamp(newValue, 0, 0.5)
    redzLib.Save.TransparencyHub = clampedValue
    
    local themeStorage = redzLib.SaveForTheme
    
    for _, instance in pairs(themeStorage.Frames) do
        instance.BackgroundTransparency = clampedValue
    end
    
    for _, instance in pairs(themeStorage.Buttons) do
        instance.BackgroundTransparency = clampedValue
    end
end

function redzLib:CreateTheme(themeName, configs)
    redzLib.Themes[themeName] = configs
end

function redzLib:SetTheme(themeName)
    if not VerifyTheme(themeName) then return end
    
    Theme = redzLib.Themes[themeName]
    redzLib.Save.Theme = themeName
    Theme["Transparency"] = redzLib.Save.TransparencyHub
    
    local themeStorage = redzLib.SaveForTheme
    SaveSettings("redz library V4.lua", redzLib.Save)
    
    -- Update all themed elements
    for _, instance in pairs(themeStorage.Frames) do
        if instance then
            instance.BackgroundColor3 = Theme["Color Hub 1"]
            instance.BackgroundTransparency = Theme["Transparency"]
        end
    end
    
    for _, instance in pairs(themeStorage.Buttons) do
        if instance then
            instance.BackgroundColor3 = Theme["Color Hub 2"]
            instance.BackgroundTransparency = Theme["Transparency"]
        end
    end
    
    for _, instance in pairs(themeStorage.Stroke) do
        if instance then
            if instance:IsA("ImageLabel") then
                instance.ImageColor3 = Theme["Color Stroke"]
            elseif instance:IsA("UIStroke") then
                instance.Color = Theme["Color Stroke"]
                instance.Thickness = Theme["Stroke Thickness"]
            else
                instance.BackgroundColor3 = Theme["Color Stroke"]
            end
        end
    end
    
    for _, instance in pairs(themeStorage.Corner) do
        if instance then
            instance.CornerRadius = Theme["Corner Radius"]
        end
    end
    
    for _, instance in pairs(themeStorage.Text) do
        if instance then
            if instance:IsA("ImageLabel") then
                instance.ImageColor3 = Theme["Color Text"]
            else
                instance.TextColor3 = Theme["Color Text"]
            end
        end
    end
    
    for _, instance in pairs(themeStorage.DarkText) do
        if instance then
            instance.TextColor3 = Theme["Color Dark Text"]
        end
    end
    
    for _, instance in pairs(themeStorage.Theme) do
        if instance then
            instance.BackgroundColor3 = Theme["Color Theme"]
        end
    end
    
    for _, table in pairs(themeStorage.Toggle) do
        if table[1] then
            local color = table[2]:GetToggle() and Theme["Color Theme"] or Theme["Color Stroke"]
            if table[1]:IsA("Frame") then
                table[1].BackgroundColor3 = color
            else
                table[1].Color = color
            end
        end
    end
end

function redzLib:GetThemes()
    local themes = {}
    for themeName, _ in pairs(redzLib.Themes) do
        table.insert(themes, themeName)
    end
    return themes
end

-- ═══════════════════════════════════════════════════════════════
--                        WINDOW MANAGEMENT
-- ═══════════════════════════════════════════════════════════════

function redzLib:Visible(bool)
    ScreenGui.Enabled = bool
end

function redzLib:Destroy()
    ScreenGui:Destroy()
end

function redzLib:MakeWindow(configs)
    local isMinimized, waitMinimize, savedSize = false, false, nil
    local windowTitle = configs[1] or configs.Title or "redz library"
    local subTitle = configs[2] or configs.SubTitle or "by : redz9999"
    local loadTitle = configs[3] or configs.LoadText or subTitle
    local defaultTheme = configs[4] or configs.DefaultTheme or false
    local saveConfig = configs[5] or configs.Flags or "redz Library v4 | Flags.lua"
    local flags = redzLib.Flags
    
    if saveConfig and typeof(saveConfig) == "string" then
        saveConfig = string.gsub(saveConfig, "/", "|")
    end
    
    if defaultTheme and typeof(defaultTheme) == "string" and VerifyTheme(defaultTheme) then
        redzLib:SetTheme(defaultTheme)
    end
    
    -- ═══════════════════════════════════════════════════════════════
    --                        LOADING ANIMATION
    -- ═══════════════════════════════════════════════════════════════
    
    local animFrame = InsertTheme(Create("Frame", ScreenGui, {
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Theme["Color Hub 1"],
        ClipsDescendants = true
    }, {Corner()}), "Frames")
    
    local animText = InsertTheme(Create("TextLabel", animFrame, {
        Size = UDim2.fromScale(1, 1),
        BackgroundTransparency = 1,
        Text = loadTitle,
        Font = Theme["Font"][2],
        TextSize = 12,
        TextColor3 = Theme["Color Text"],
        TextTransparency = 1
    }), "Text")
    
    -- Loading sequence
    CreateTween({animFrame, "Size", UDim2.fromOffset(0, 25), 0.2, true})
    CreateTween({animFrame, "Size", UDim2.fromOffset(140, 25), 0.6, true})
    CreateTween({animText, "TextTransparency", 0, 0.4, true})
    task.wait(0.5)
    CreateTween({animText, "TextTransparency", 1, 0.4, true})
    CreateTween({animFrame, "Size", UDim2.fromOffset(0, 25), 0.4, true})
    animText:Destroy()
    animFrame:Destroy()
    
    -- ═══════════════════════════════════════════════════════════════
    --                        FILE MANAGEMENT
    -- ═══════════════════════════════════════════════════════════════
    
    local function SaveFile(name, value)
        if writefile and saveConfig and typeof(saveConfig) == "string" then
            flags[name] = value
            local success, encode = pcall(function()
                return Services.HttpService:JSONEncode(flags)
            end)
            if success then
                writefile(saveConfig, encode)
            end
        end
    end
    
    local function LoadFile()
        if saveConfig and typeof(saveConfig) == "string" then
            if readfile and isfile and isfile(saveConfig) then
                local success, decode = pcall(function()
                    return Services.HttpService:JSONDecode(readfile(saveConfig))
                end)
                if success and typeof(decode) == "table" then
                    flags = decode
                end
            end
        end
    end
    
    LoadFile()
    
    -- ═══════════════════════════════════════════════════════════════
    --                        MAIN WINDOW FRAME
    -- ═══════════════════════════════════════════════════════════════
    
    local MainFrame = MakeDrag(InsertTheme(Create("Frame", ScreenGui, {
        Size = UDim2.fromOffset(unpack(redzLib.Save.UISize)),
        Position = UDim2.new(
            0.5, -redzLib.Save.UISize[1]/2, 
            0.5, -redzLib.Save.UISize[2]/2
        ),
        Active = true,
        BackgroundColor3 = Theme["Color Hub 1"],
        BackgroundTransparency = Theme["Transparency"]
    }, {Corner()}), "Frames"))
    
    -- Top bar
    local Topbar = Create("Frame", MainFrame, {
        Size = UDim2.new(1, 0, 0, 28),
        BackgroundTransparency = 1
    })
    
    -- Scrolling frame for tabs
    local MainScroll = Create("ScrollingFrame", MainFrame, {
        Size = UDim2.new(0, redzLib.Save.ScrollSize, 1, -Topbar.Size.Y.Offset),
        Position = UDim2.new(0, 0, 1, 0),
        AnchorPoint = Vector2.new(0, 1),
        ScrollBarThickness = 1,
        BackgroundTransparency = 1,
        CanvasSize = UDim2.new(),
        AutomaticCanvasSize = "Y"
    }, {
        Create("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10)
        }),
        Create("UIListLayout", {
            Padding = UDim.new(0, 5)
        })
    })
    
    -- Container for tab content
    local Containers = Create("Frame", MainFrame, {
        Size = UDim2.new(1, -MainScroll.Size.X.Offset, 1, -Topbar.Size.Y.Offset),
        AnchorPoint = Vector2.new(1, 1),
        Position = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1
    })
    
    -- ═══════════════════════════════════════════════════════════════
    --                        WINDOW CONTROLS
    -- ═══════════════════════════════════════════════════════════════
    
    -- Size control handles
    local ControlSize1 = MakeDrag(Create("Frame", MainFrame, {
        Size = UDim2.new(0, 35, 0, 35),
        Position = MainFrame.Size,
        Active = true,
        AnchorPoint = Vector2.new(0.8, 0.8),
        BackgroundTransparency = 1
    }))
    
    local ControlSize2 = MakeDrag(Create("Frame", MainFrame, {
        Size = UDim2.new(0, 20, 1, -30),
        Position = UDim2.new(0, MainScroll.Size.X.Offset, 1, 0),
        AnchorPoint = Vector2.new(0.5, 1),
        Active = true,
        BackgroundTransparency = 1
    }))
    
    local function ControlSize()
        local pos1, pos2 = ControlSize1.Position, ControlSize2.Position
        
        ControlSize1.Position = UDim2.fromOffset(
            math.clamp(pos1.X.Offset, 400, 1000), 
            math.clamp(pos1.Y.Offset, 200, 500)
        )
        
        ControlSize2.Position = UDim2.new(
            0, math.clamp(pos2.X.Offset, 135, 250), 
            1, 0
        )
        
        MainScroll.Size = UDim2.new(0, ControlSize2.Position.X.Offset, 1, -Topbar.Size.Y.Offset)
        Containers.Size = UDim2.new(1, -MainScroll.Size.X.Offset, 1, -Topbar.Size.Y.Offset)
        MainFrame.Size = ControlSize1.Position
    end
    
    ControlSize1:GetPropertyChangedSignal("Position"):Connect(ControlSize)
    ControlSize2:GetPropertyChangedSignal("Position"):Connect(ControlSize)
    
    ConnectSave(ControlSize1, function()
        if not isMinimized then
            redzLib.Save.UISize = {MainFrame.Size.X.Offset, MainFrame.Size.Y.Offset}
            SaveSettings("redz library V4.lua", redzLib.Save)
        end
    end)
    
    ConnectSave(ControlSize2, function()
        redzLib.Save.ScrollSize = MainScroll.Size.X.Offset
        SaveSettings("redz library V4.lua", redzLib.Save)
    end)
    
    -- ═══════════════════════════════════════════════════════════════
    --                        DIALOG SYSTEM
    -- ═══════════════════════════════════════════════════════════════
    
    local DialogBackground = InsertTheme(AddConnection(Create("TextButton", MainFrame, {
        BackgroundTransparency = 0.5,
        Text = "",
        BackgroundColor3 = Theme["Color Hub 2"],
        Visible = false,
        AutoButtonColor = false,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.fromScale(0.5, 0.5)
    }, {Corner()}), "Activated", function(dialogBg)
        CreateTween({dialogBg, "Size", UDim2.new(), 0.2, true})
        dialogBg.Visible = false
    end), "Stroke")
    
    local DialogFrame = InsertTheme(Create("Frame", DialogBackground, {
        Size = UDim2.fromScale(0.65, 0.6),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.fromScale(0.5, 0.5),
        BackgroundColor3 = Theme["Color Hub 1"],
        Active = true
    }, {
        Corner(),
        Stroke()
    }), "Frames")
    
    local DialogTitle = InsertTheme(Create("TextLabel", DialogFrame, {
        Size = UDim2.fromScale(0.6, 0.3),
        Position = UDim2.fromScale(0.5, 0.15),
        TextColor3 = Theme["Color Text"],
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundTransparency = 1,
        Font = Theme["Font"][1],
        TextScaled = true
    }), "Text")
    
    local DialogConfirm = InsertTheme(Create("TextButton", DialogFrame, {
        Size = UDim2.fromScale(0.35, 0.20),
        Position = UDim2.fromScale(0.1, 0.65),
        BackgroundColor3 = Theme["Color Hub 2"],
        TextColor3 = Color3.fromRGB(0, 200, 0),
        Font = Theme["Font"][2],
        TextSize = 18
    }, {
        Corner(),
        Stroke()
    }), "Buttons")
    
    local DialogCancel = InsertTheme(Create("TextButton", DialogFrame, {
        Size = UDim2.fromScale(0.35, 0.20),
        Position = UDim2.fromScale(0.9, 0.65),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = Theme["Color Hub 2"],
        TextColor3 = Color3.fromRGB(200, 0, 0),
        Font = Theme["Font"][2],
        TextSize = 18
    }, {
        Corner(),
        Stroke()
    }), "Buttons")
    
    -- ═══════════════════════════════════════════════════════════════
    --                        WINDOW BUTTONS
    -- ═══════════════════════════════════════════════════════════════
    
    local CloseBTN = InsertTheme(Create("TextButton", Topbar, {
        Size = UDim2.fromOffset(20, 20),
        Position = UDim2.new(1, -10, 0.5, 1.5),
        AnchorPoint = Vector2.new(1, 0.5),
        Font = Enum.Font.FredokaOne,
        Text = "×",
        TextSize = 27,
        BackgroundTransparency = 1,
        TextColor3 = Theme["Color Text"],
        AutoButtonColor = false,
        TextYAlignment = "Bottom"
    }), "Text")
    
    local MinimizeBTN = InsertTheme(AddConnection(Create("TextButton", Topbar, {
        Size = UDim2.fromOffset(20, 20),
        Position = UDim2.new(1, -30, 0.5, 1.5),
        AnchorPoint = Vector2.new(1, 0.5),
        Font = Enum.Font.FredokaOne,
        Text = "−",
        TextSize = 27,
        BackgroundTransparency = 1,
        TextColor3 = Theme["Color Text"],
        AutoButtonColor = false,
        TextYAlignment = "Bottom"
    }), "Activated", function(instance)
        if not waitMinimize then
            waitMinimize = true
            isMinimized = not isMinimized
            
            if not isMinimized then
                ControlSize1.Visible = true
                instance.Text = "−"
                CreateTween({MainFrame, "Size", savedSize, 0.3, true})
            else
                ControlSize1.Visible = false
                instance.Text = "+"
                savedSize = MainFrame.Size
                CreateTween({MainFrame, "Size", UDim2.fromOffset(MainFrame.Size.X.Offset, 28), 0.3, true})
            end
            
            waitMinimize = false
        end
    end), "Text")
    
    -- Window title
    local LabelTitle = InsertTheme(Create("TextLabel", Topbar, {
        Font = Theme["Font"][1],
        TextSize = 16,
        TextColor3 = Theme["Color Text"],
        Text = windowTitle,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 0),
        Size = UDim2.fromScale(0, 1),
        AutomaticSize = "X",
        TextXAlignment = "Left"
    }, {
        InsertTheme(Create("TextLabel", {
            TextSize = 10,
            Font = Theme["Font"][2],
            TextColor3 = Theme["Color Dark Text"],
            Position = UDim2.new(1, 5, 0, 2),
            Text = subTitle,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            TextXAlignment = "Left"
        }), "DarkText")
    }), "Text")
    
    -- ═══════════════════════════════════════════════════════════════
    --                        WINDOW OBJECT
    -- ═══════════════════════════════════════════════════════════════
    
    local isFirstTab = false
    local Window = {Dialog = {}}
    
    -- Close button functionality
    CloseBTN.Activated:Connect(function()
        if not waitMinimize then
            waitMinimize = true
            Window.Dialog:Create({
                Title = "Are you sure you want to close this script?",
                Confirm = {
                    Text = "Close",
                    Callback = function()
                        CreateTween({ScreenGui.UIScale, "Scale", 0, 0.3, true})
                        ScreenGui:Destroy()
                    end
                },
                Cancel = {
                    Text = "Cancel"
                }
            })
            waitMinimize = false
        end
    end)
    
    -- ═══════════════════════════════════════════════════════════════
    --                        DIALOG METHODS
    -- ═══════════════════════════════════════════════════════════════
    
    function Window.Dialog:Wait()
        repeat task.wait() until not DialogBackground or not DialogBackground.Visible
    end
    
    function Window.Dialog:Create(configs)
        local dialog = {
            Title = configs[1] or configs.Title or "Dialog",
            Confirm = {
                Text = configs.Confirm[1] or configs.Confirm.Text or "Confirm",
                Callback = configs.Confirm[2] or configs.Confirm.Callback or function()end
            },
            Cancel = {
                Text = configs.Cancel[1] or configs.Cancel.Text or "Cancel",
                Callback = configs.Cancel[2] or configs.Cancel.Callback or function()end
            },
        }
        
        local connection1, connection2
        local function DisconnectAll()
            if connection1 then connection1:Disconnect() end
            if connection2 then connection2:Disconnect() end
        end
        
        DialogTitle.Text = dialog.Title
        DialogCancel.Text = dialog.Cancel.Text
        DialogConfirm.Text = dialog.Confirm.Text
        
        connection1 = DialogCancel.Activated:Connect(function()
            DisconnectAll()
            task.spawn(dialog.Cancel.Callback)
            CreateTween({DialogBackground, "Size", UDim2.new(), 0.3, true})
            DialogBackground.Visible = false
        end)
        
        connection2 = DialogConfirm.Activated:Connect(function()
            DisconnectAll()
            task.spawn(dialog.Confirm.Callback)
            CreateTween({DialogBackground, "Size", UDim2.new(), 0.3, true})
            DialogBackground.Visible = false
        end)
        
        DialogBackground.Visible = true
        if isMinimized then
            CreateTween({MainFrame, "Size", savedSize, 0.3})
            MinimizeBTN.Text = "−"
            isMinimized = false
        end
        CreateTween({DialogBackground, "Size", UDim2.fromScale(1, 1), 0.2, true})
    end
    
    -- ═══════════════════════════════════════════════════════════════
    --                        WINDOW METHODS
    -- ═══════════════════════════════════════════════════════════════
    
    function Window:Destroy()
        MainFrame:Destroy()
    end
    
    function Window:Visible(bool)
        MainFrame.Visible = bool
    end
    
    function Window:Set(newVal)
        if typeof(newVal) == "string" then
            LabelTitle.Text = newVal
        elseif typeof(newVal) == "number" then
            redzLib:SetTransparency(newVal)
        end
    end
    
    -- ═══════════════════════════════════════════════════════════════
    --                        TAB CREATION
    -- ═══════════════════════════════════════════════════════════════
    
    function Window:MakeTab(configs)
        local tabName = configs[1] or configs.Name or "Tab"
        local tabImage = configs[2] or configs.Icon or "rbxassetid://"
        
        -- Process icon
        if not tabImage:find("rbxassetid://") then
            tabImage = GetIcon(tabImage)
        end
        if not tabImage:find("rbxassetid://") or #tabImage:gsub("rbxassetid://", ""):split("") < 5 then
            tabImage = false
        end
        
        -- Create tab container
        local Container = Create("ScrollingFrame", Containers, {
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 1,
            BackgroundTransparency = 1,
            AutomaticCanvasSize = "Y",
            CanvasSize = UDim2.new(),
            Visible = not isFirstTab
        }, {
            Create("UIPadding", {
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                PaddingTop = UDim.new(0, 10),
                PaddingBottom = UDim.new(0, 10)
            }),
            Create("UIListLayout", {
                Padding = UDim.new(0, 5)
            })
        })
        
        -- Create tab button
        local TabFrame = Button(MainScroll, {
            Size = UDim2.new(1, 0, 0, 20),
        })
        
        local TabText = InsertTheme(Create("TextLabel", TabFrame, {
            Font = Theme["Font"][3],
            Text = tabName,
            Size = UDim2.new(1, -20, 1, 0),
            Position = UDim2.fromOffset(tabImage and 38 or 18, 0),
            TextXAlignment = "Left",
            BackgroundTransparency = 1,
            TextColor3 = Theme["Color Text"],
            TextTransparency = isFirstTab and 0.4 or 0,
            TextSize = 12,
            TextTruncate = "AtEnd"
        }), "DarkText")
        
        local Selected = InsertTheme(Create("Frame", TabFrame, {
            Size = UDim2.new(0, 5, 1, -6),
            Position = UDim2.new(0, 8, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            BackgroundTransparency = isFirstTab and 1 or 0,
            BackgroundColor3 = Theme["Color Theme"]
        }, {Corner()}), "Theme")
        
        local TabImage = InsertTheme(Create("ImageLabel", TabFrame, {
            Size = UDim2.new(0, 15, 0, 15),
            Position = UDim2.new(0, 18, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            BackgroundTransparency = 1,
            Image = tabImage or "",
            ImageTransparency = isFirstTab and 0.4 or 0,
            ImageColor3 = Theme["Color Text"]
        }), "Text")
        
        -- Tab switching logic
        TabFrame.Activated:Connect(function()
            -- Hide other containers
            for _, instance in pairs(Containers:GetChildren()) do
                if instance ~= Container and instance:IsA(Container.ClassName) then
                    instance.Visible = false
                end
            end
            
            -- Deselect other tabs
            for _, instance in pairs(MainScroll:GetChildren()) do
                if instance ~= TabFrame and instance:IsA(TabFrame.ClassName) then
                    CreateTween({instance.TextLabel, "TextTransparency", 0.4, 0.3})
                    CreateTween({instance.Frame, "BackgroundTransparency", 1, 0.3})
                    CreateTween({instance.ImageLabel, "ImageTransparency", 0.4, 0.3})
                end
            end
            
            -- Select current tab
            CreateTween({TabText, "TextTransparency", 0, 0.3})
            CreateTween({Selected, "BackgroundTransparency", 0, 0.3})
            CreateTween({TabImage, "ImageTransparency", 0, 0.3})
            Container.Visible = true
        end)
        
        isFirstTab = true
        
        -- ═══════════════════════════════════════════════════════════════
        --                        TAB OBJECT
        -- ═══════════════════════════════════════════════════════════════
        
        local Tab = {}
        
        function Tab:Set(val1, val2)
            if val1 and typeof(val1) == "string" then
                if val2 then
                    TabText.Text = val1
                    TabImage.Image = val2
                elseif val1:find("rbxassetid://") then
                    TabImage.Image = val1
                else
                    TabText.Text = val1
                end
            end
        end
        
        function Tab:Visible(bool)
            TabFrame.Visible = bool
            Container.Visible = bool
        end
        
        function Tab:Destroy()
            TabFrame:Destroy()
            Container:Destroy()
        end
        
        -- ═══════════════════════════════════════════════════════════════
        --                        TAB ELEMENTS
        -- ═══════════════════════════════════════════════════════════════
        
        function Tab:AddSection(configs)
            local sectionName = configs[1] or configs.Name or "Section"
            
            local Frame = Create("Frame", Container, {
                Size = UDim2.new(1, 0, 0, 15),
                BackgroundTransparency = 1
            })
            
            local Text = InsertTheme(Create("TextLabel", Frame, {
                Font = Theme["Font"][2],
                Text = sectionName,
                TextSize = 11,
                Size = UDim2.new(1, -20, 1, 0),
                Position = UDim2.new(0, 15, 0, 0),
                BackgroundTransparency = 1,
                TextColor3 = Theme["Color Dark Text"],
                TextXAlignment = "Left",
                TextTruncate = "AtEnd"
            }), "DarkText")
            
            local Section = {}
            function Section:Set(newVal) Text.Text = newVal end
            function Section:Destroy() Frame:Destroy() end
            function Section:Visible(bool) Frame.Visible = bool end
            
            return Section
        end
        
        function Tab:AddLabel(configs)
            local labelType = configs[1] or configs.Type or "Text"
            local labelName = configs[2] or configs.Name or "This is a " .. labelType .. " Label"
            local labelImage = configs[3] or configs.Image or "rbxassetid://"
            
            local Frame = Button(Container, {
                Size = UDim2.new(1, 0, 0, 25)
            }, {Corner()})
            
            local element1, element2
            
            if labelType == "Image" then
                Frame.Size = UDim2.new(1, 0, 0, 160)
                
                element1 = InsertTheme(Create("TextLabel", Frame, {
                    Font = Theme["Font"][2],
                    Text = labelName,
                    TextSize = 13,
                    Size = UDim2.new(1, -25, 0, 25),
                    Position = UDim2.new(0, 15, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Theme["Color Text"],
                    TextXAlignment = "Left",
                    TextTruncate = "AtEnd"
                }), "Text")
                
                element2 = Create("ImageLabel", Frame, {
                    Size = UDim2.new(0, 125, 0, 125),
                    Position = UDim2.new(0, 15, 0, 25),
                    BackgroundTransparency = 1,
                    Image = labelImage
                })
            else
                element1 = InsertTheme(Create("TextLabel", Frame, {
                    Font = Theme["Font"][2],
                    Text = labelName,
                    TextSize = 13,
                    Size = UDim2.new(1, -25, 1, 0),
                    Position = UDim2.new(0, 15, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Theme["Color Text"],
                    TextXAlignment = "Left",
                    TextTruncate = "AtEnd"
                }), "Text")
            end
            
            local Label = {}
            
            function Label:Visible(bool) Frame.Visible = bool end
            function Label:Destroy() Frame:Destroy() end
            function Label:Set(newValue1, newValue2)
                if labelType == "Image" then
                    if typeof(newValue1) == "string" then
                        if string.find(newValue1, "rbxassetid://") then
                            element2.Image = newValue1
                        else
                            element1.Text = newValue1
                        end
                        if newValue2 and string.find(newValue2, "rbxassetid://") then
                            element2.Image = newValue2
                        end
                    end
                else
                    if typeof(newValue1) == "string" then
                        element1.Text = newValue1
                    end
                end
            end
            
            return Label
        end
        
        return Tab
    end
    
    -- ═══════════════════════════════════════════════════════════════
    --                        MINIMIZE BUTTON
    -- ═══════════════════════════════════════════════════════════════
    
    function Window:AddMinimizeButton(configs)
        local buttonProps = configs[1] or configs.Button or {}
        local uiCorner = configs[2] or configs.UICorner or {true, {CornerRadius = UDim.new(0.5, 0)}}
        local uiStroke = configs[3] or configs.UIStroke or {false, {Color = Theme["Color Stroke"]}}
        
        uiCorner[2] = uiCorner[2] or {}
        uiStroke[2] = uiStroke[2] or {}
        
        local ButtonMinimize = SetProps(MakeDrag(Create("ImageButton", ScreenGui, {
            Size = UDim2.fromOffset(40, 40),
            Active = true,
            Position = UDim2.fromScale(0.15, 0.15),
            BackgroundColor3 = Theme["Color Hub 1"],
            Image = GetIcon("swords")
        })), buttonProps)
        
        local minimizeBool = true
        ButtonMinimize.Activated:Connect(function()
            MainFrame.Visible = minimizeBool
            minimizeBool = not minimizeBool
        end)
        
        local strokeBTN, cornerBTN
        
        if uiCorner[1] then
            cornerBTN = Create("UICorner", ButtonMinimize)
            SetProps(cornerBTN, uiCorner[2])
        end
        
        if uiStroke[1] then
            strokeBTN = Create("UIStroke", ButtonMinimize)
            SetProps(strokeBTN, uiStroke[2])
        end
        
        local Minimize = {
            Button = ButtonMinimize,
            Stroke = strokeBTN,
            Corner = cornerBTN
        }
        
        function Minimize:Visible(bool)
            ButtonMinimize.Visible = bool
        end
        
        function Minimize:Destroy()
            ButtonMinimize:Destroy()
        end
        
        return Minimize
    end
    
    return Window
end

-- ═══════════════════════════════════════════════════════════════
--                        LIBRARY EXPORT
-- ═══════════════════════════════════════════════════════════════

return redzLib
